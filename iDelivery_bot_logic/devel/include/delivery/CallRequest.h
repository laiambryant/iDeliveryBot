// Generated by gencpp from file delivery/CallRequest.msg
// DO NOT EDIT!


#ifndef DELIVERY_MESSAGE_CALLREQUEST_H
#define DELIVERY_MESSAGE_CALLREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace delivery
{
template <class ContainerAllocator>
struct CallRequest_
{
  typedef CallRequest_<ContainerAllocator> Type;

  CallRequest_()
    : ok(false)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)  {
    }
  CallRequest_(const ContainerAllocator& _alloc)
    : ok(false)
    , pos_x(0.0)
    , pos_y(0.0)
    , pos_z(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ok_type;
  _ok_type ok;

   typedef float _pos_x_type;
  _pos_x_type pos_x;

   typedef float _pos_y_type;
  _pos_y_type pos_y;

   typedef float _pos_z_type;
  _pos_z_type pos_z;





  typedef boost::shared_ptr< ::delivery::CallRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::delivery::CallRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CallRequest_

typedef ::delivery::CallRequest_<std::allocator<void> > CallRequest;

typedef boost::shared_ptr< ::delivery::CallRequest > CallRequestPtr;
typedef boost::shared_ptr< ::delivery::CallRequest const> CallRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::delivery::CallRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::delivery::CallRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::delivery::CallRequest_<ContainerAllocator1> & lhs, const ::delivery::CallRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ok == rhs.ok &&
    lhs.pos_x == rhs.pos_x &&
    lhs.pos_y == rhs.pos_y &&
    lhs.pos_z == rhs.pos_z;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::delivery::CallRequest_<ContainerAllocator1> & lhs, const ::delivery::CallRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace delivery

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::delivery::CallRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::delivery::CallRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delivery::CallRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::delivery::CallRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery::CallRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::delivery::CallRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::delivery::CallRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd3e0142db41a8872e933337357dd05d";
  }

  static const char* value(const ::delivery::CallRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd3e0142db41a887ULL;
  static const uint64_t static_value2 = 0x2e933337357dd05dULL;
};

template<class ContainerAllocator>
struct DataType< ::delivery::CallRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "delivery/CallRequest";
  }

  static const char* value(const ::delivery::CallRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::delivery::CallRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ok\n"
"float32 pos_x\n"
"float32 pos_y\n"
"float32 pos_z\n"
"\n"
;
  }

  static const char* value(const ::delivery::CallRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::delivery::CallRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ok);
      stream.next(m.pos_x);
      stream.next(m.pos_y);
      stream.next(m.pos_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CallRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::delivery::CallRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::delivery::CallRequest_<ContainerAllocator>& v)
  {
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
    s << indent << "pos_x: ";
    Printer<float>::stream(s, indent + "  ", v.pos_x);
    s << indent << "pos_y: ";
    Printer<float>::stream(s, indent + "  ", v.pos_y);
    s << indent << "pos_z: ";
    Printer<float>::stream(s, indent + "  ", v.pos_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DELIVERY_MESSAGE_CALLREQUEST_H
